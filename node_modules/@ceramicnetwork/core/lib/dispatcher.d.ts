import { CID } from 'multiformats/cid';
import { DiagnosticsLogger, IpfsApi, ServiceLogger, IpfsNodeStatus } from '@ceramicnetwork/common';
import { StreamID, EventID } from '@ceramicnetwork/streamid';
import { Repository } from './state-management/repository.js';
import { PubsubMessage, QueryMessage, ResponseMessage, UpdateMessage } from './pubsub/pubsub-message.js';
import { Subscription } from 'rxjs';
import { MessageBus } from './pubsub/message-bus.js';
import { TaskQueue } from './ancillary/task-queue.js';
import type { ShutdownSignal } from './shutdown-signal.js';
import { CarBlock, type CAR } from 'cartonne';
import { IPLDRecordsCache } from './store/ipld-records-cache.js';
import { IReconApi } from './recon.js';
import { type CeramicNetworkOptions } from './initialization/network-options.js';
export declare class CommitSizeError extends Error {
    constructor(cid: CID | string, size: number);
}
export declare class Dispatcher {
    readonly _ipfs: IpfsApi;
    private readonly networkOptions;
    readonly repository: Repository;
    private readonly _logger;
    private readonly _pubsubLogger;
    private readonly _shutdownSignal;
    private readonly recon;
    readonly tasks: TaskQueue;
    readonly messageBus: MessageBus;
    readonly ipldCache: IPLDRecordsCache;
    private readonly pubsubCache;
    private readonly carFactory;
    private readonly _ipfsTimeout;
    readonly enableSync: boolean;
    constructor(_ipfs: IpfsApi, networkOptions: CeramicNetworkOptions, repository: Repository, _logger: DiagnosticsLogger, _pubsubLogger: ServiceLogger, _shutdownSignal: ShutdownSignal, enableSync: boolean, maxQueriesPerSecond: number, recon: IReconApi, tasks?: TaskQueue);
    init(): Promise<void>;
    get shutdownSignal(): ShutdownSignal;
    ipfsNodeStatus(): Promise<IpfsNodeStatus>;
    storeRecord(record: Record<string, unknown>): Promise<CID>;
    getIpfsBlock(cid: CID): Promise<CarBlock>;
    storeTimeEvent(car: CAR, streamId: StreamID, controllers: Array<string>, eventHeight: number, model?: StreamID): Promise<void>;
    importCAR(car: CAR, eventId?: EventID): Promise<void>;
    _addCommitToCar(carFile: CAR, data: any): CID;
    storeCommit(data: any, streamId?: StreamID): Promise<CID>;
    storeInitEvent(data: any): Promise<CID>;
    storeDataEvent(data: any, eventHeight: number, streamId: StreamID, controllers: Array<string>, model?: StreamID): Promise<CID>;
    retrieveCommit(cid: CID | string, streamId?: StreamID): Promise<any>;
    retrieveFromIPFS(cid: CID | string, path?: string): Promise<any>;
    cidExistsInLocalIPFSStore(cid: CID | string): Promise<boolean>;
    private _getFromIpfs;
    publishTip(streamId: StreamID, tip: CID, model?: StreamID): Subscription;
    handleMessage(message: PubsubMessage): Promise<void>;
    _handleTip(tip: CID, streamId: StreamID, model?: StreamID): Promise<void>;
    _handleUpdateMessage(message: UpdateMessage): Promise<void>;
    _handleQueryMessage(message: QueryMessage): Promise<void>;
    _handleResponseMessage(message: ResponseMessage): Promise<void>;
    close(): Promise<void>;
    private publish;
}
//# sourceMappingURL=dispatcher.d.ts.map