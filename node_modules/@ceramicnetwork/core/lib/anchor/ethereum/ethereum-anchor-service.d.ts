import type { AnchorEvent, FetchRequest, DiagnosticsLogger } from '@ceramicnetwork/common';
import { type Observable } from 'rxjs';
import type { CAR } from 'cartonne';
import type { AnchorService, AnchorServiceAuth, AnchorValidator, AuthenticatedAnchorService } from '../anchor-service.js';
import type { AnchorRequestStore } from '../../store/anchor-request-store.js';
import { type AnchorLoopHandler } from '../anchor-service.js';
export declare class EthereumAnchorService implements AnchorService {
    #private;
    readonly url: string;
    readonly events: Observable<AnchorEvent>;
    readonly validator: AnchorValidator;
    constructor(anchorServiceUrl: string, ethereumRpcUrl: string | undefined, logger: DiagnosticsLogger, sendRequest?: FetchRequest, enableAnchorPollingLoop?: boolean);
    init(store: AnchorRequestStore, eventHandler: AnchorLoopHandler): Promise<void>;
    assertCASAccessible(): void;
    getSupportedChains(): Promise<Array<string>>;
    requestAnchor(carFile: CAR): Promise<AnchorEvent>;
    close(): Promise<void>;
}
export declare class AuthenticatedEthereumAnchorService extends EthereumAnchorService implements AuthenticatedAnchorService {
    readonly auth: AnchorServiceAuth;
    constructor(auth: AnchorServiceAuth, anchorServiceUrl: string, ethereumRpcUrl: string | undefined, logger: DiagnosticsLogger, enableAnchorPollingLoop?: boolean);
    init(store: AnchorRequestStore, eventHandler: AnchorLoopHandler): Promise<void>;
}
//# sourceMappingURL=ethereum-anchor-service.d.ts.map