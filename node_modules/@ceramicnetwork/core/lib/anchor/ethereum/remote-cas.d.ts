import type { CASClient } from '../anchor-service.js';
import type { AnchorEvent, FetchRequest } from '@ceramicnetwork/common';
import type { AnchorRequestCarFileReader } from '../anchor-request-car-file-reader.js';
import type { StreamID } from '@ceramicnetwork/streamid';
import type { CID } from 'multiformats/cid';
import { type Observable } from 'rxjs';
import { DiagnosticsLogger } from '@ceramicnetwork/common';
export declare class RemoteCAS implements CASClient {
    #private;
    constructor(logger: DiagnosticsLogger, anchorServiceUrl: string, sendRequest: FetchRequest);
    assertCASAccessible(): void;
    _recordCASContactFailure(): void;
    _recordCASContactSuccess(action: string): void;
    supportedChains(): Promise<Array<string>>;
    create(carFileReader: AnchorRequestCarFileReader): Promise<AnchorEvent>;
    create$(carFileReader: AnchorRequestCarFileReader): Observable<unknown>;
    getStatusForRequest(streamId: StreamID, tip: CID): Promise<AnchorEvent>;
    close(): Promise<void>;
}
//# sourceMappingURL=remote-cas.d.ts.map