import { StreamID } from '@ceramicnetwork/streamid';
import { ObjectStore } from './object-store.js';
import { CID } from 'multiformats/cid';
import { DiagnosticsLogger, GenesisCommit } from '@ceramicnetwork/common';
export declare type AnchorRequestData = {
    cid: CID;
    timestamp: number;
    genesis: GenesisCommit;
};
export declare type AnchorRequestStoreListResult = {
    key: StreamID;
    value: AnchorRequestData;
};
export declare function serializeAnchorRequestData(value: AnchorRequestData): any;
export declare function deserializeAnchorRequestData(serialized: any): AnchorRequestData;
export declare class AnchorRequestStore extends ObjectStore<StreamID, AnchorRequestData> {
    #private;
    constructor(logger: DiagnosticsLogger, infiniteListBatchTimeoutMs?: number);
    exists(key: StreamID): Promise<boolean>;
    list(batchSize?: number): AsyncIterable<Array<AnchorRequestStoreListResult>>;
    infiniteList(batchSize?: number, restartDelay?: number): AsyncGenerator<StreamID>;
    close(): Promise<void>;
}
//# sourceMappingURL=anchor-request-store.d.ts.map