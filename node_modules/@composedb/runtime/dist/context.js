import { DocumentLoader } from '@composedb/loader';
export function createContext(params) {
    const { cache, ceramic, fallbackViewerID } = params;
    const loader = params.loader ?? new DocumentLoader({
        ceramic,
        cache
    });
    function getViewerID() {
        const did = ceramic.did;
        return did ? did.hasParent ? did.parent : did.id : fallbackViewerID ?? null;
    }
    return {
        ceramic,
        loader,
        getViewerID,
        isAuthenticated: ()=>ceramic.did?.authenticated ?? false,
        loadDoc: async (id, fresh = false)=>{
            const key = {
                id
            };
            if (fresh) {
                loader.clear(key);
            }
            return await loader.load(key);
        },
        upsertSingle: async (model, content, options = {})=>{
            const controller = getViewerID();
            if (controller == null) {
                throw new Error('Document can only be created with an authenticated account');
            }
            const { shouldIndex, ...opts } = options;
            const doc = await loader.loadSingle(controller, model, {
                ...opts,
                onlyIndexed: false
            });
            await doc.replace(content, typeof shouldIndex === 'undefined' ? undefined : {
                shouldIndex
            });
            return doc;
        },
        upsertSet: async (model, unique, content, options = {})=>{
            const controller = getViewerID();
            if (controller == null) {
                throw new Error('Document can only be created with an authenticated account');
            }
            const { shouldIndex, ...opts } = options;
            const doc = await loader.loadSet(controller, model, unique, {
                ...opts,
                onlyIndexed: false
            });
            await doc.replace(content, typeof shouldIndex === 'undefined' ? undefined : {
                shouldIndex
            });
            return doc;
        },
        enableDocIndexing: async (id, shouldIndex, opts)=>{
            const controller = getViewerID();
            if (controller == null) {
                throw new Error('Document can only be hidden with an authenticated account');
            }
            const doc = await loader.load({
                id
            });
            await doc.shouldIndex(shouldIndex, opts);
        },
        queryCount: async (query)=>{
            return await ceramic.index.count(query);
        }
    };
}
